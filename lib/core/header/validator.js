// Generated by CoffeeScript 1.4.0
(function() {
  var Spec, Validator,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Spec = require('./spec');

  Validator = (function() {

    function Validator() {
      this.assert = require('assert');
      this.spec = Spec;
      this.version = -1;
    }

    Validator.prototype.assert = function(condition, failMessage) {
      return this.assert(condition, failMessage);
    };

    Validator.prototype.assertSignature = function(signature) {
      return this.assert(signature === this.spec.signature, "Signature: always equal to '" + this.spec.signature + "'. Your value: " + signature);
    };

    Validator.prototype.assertVersion = function(version) {
      var _ref;
      this.version = version;
      return this.assert((_ref = this.version, __indexOf.call(this.spec.supportedVersions, _ref) >= 0), "Supported version: always equal to " + this.spec.supportedVersions[0] + " (**PSB** version is " + this.spec.supportedVersions[1] + ".). Your value: " + this.spec.version);
    };

    Validator.prototype.assertChannels = function(channels) {
      return this.assert((1 < channels && channels < 56), "Number of channels range is 1 to 56. Your value: " + channels);
    };

    Validator.prototype.assertHeight = function(height) {
      return this.assert((this.version === 1 && (1 < height && height < 30000)) || (this.version === 2 && (1 < height && height < 300000)), "Supported height range is 1 to 30,000 (**PSB** max of 300,000.). Your value: " + height);
    };

    Validator.prototype.assertWidth = function(width) {
      return this.assert((this.version === 1 && (1 < width && width < 30000)) || (this.version === 2 && (1 < width && width < 300000)), "Supported width range is 1 to 30,000 (**PSB** max of 300,000.). Your value: " + width);
    };

    Validator.prototype.assertDepth = function(depth) {
      return this.assert(__indexOf.call(this.spec.supportedDepths, depth) >= 0, "Supported depths are " + this.spec.supportedDepths + ". Your value: " + depth);
    };

    Validator.prototype.assertColorMode = function(colorMode) {
      return this.assert(__indexOf.call(this.spec.supportedColorModes, colorMode) >= 0, "Supported color modes: " + this.spec.supportedColorModes);
    };

    return Validator;

  })();

  module.exports = Validator;

}).call(this);
